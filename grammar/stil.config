// Default config file for STIL conversion
// Comments are allowed (and ignored) outside the blocks
// Block order and format very sensitive!
// Whitespaces ignored


// Here you must specify for each event sequence on the
// waveforms to what "tester event" it should be translated
//
// If a rule is not defined by an used waveform (event sequence)
// an error will be displayed and the conversion will fail

event_map {
    D -> 0, (NR, D0 = 0, D1 = E0, D2 = -, D3 = 1), (RL, D0 = 0, D1 = E0, D2 = ?, D3 = 1), (RH, D0 = 0, D1 = E0, D2 = 1, D3 = 1), (SBL, D0 = E0, D1 = ?, D2 = ?, D3 = 1)
    U -> 1, (NR, D0 = 0, D1 = E0, D2 = -, D3 = 1), (RL, D0 = 0, D1 = E0, D2 = 1, D3 = 1), (RH, D0 = 0, D1 = E0, D2 = ?, D3 = 1), (SBH, D0 = E0, D1 = ?, D2 = ?, D3 = 1)
    Z -> X, (Off, R0 = ?), (Edge, R0 = ?)
    H -> H, (Edge, R0 = E0)
    L -> L, (Edge, R0 = E0)
    T -> M, (Edge, R0 = E0)
    X -> X, (Off, R0 = ?), (Edge, R0 = ?)
    
    XH -> H, (Edge, R0 = E1)
    XL -> L, (Edge, R0 = E1)
    XT -> M, (Edge, R0 = E1)
    XX -> X, (Off, R0 = ?), (Edge, R0 = ?)

    ZH -> H, (Edge, R0 = E1)
    ZL -> L, (Edge, R0 = E1)
    ZT -> M, (Edge, R0 = E1)
    ZX -> X, (Off, R0 = ?), (Edge, R0 = ?)

    DUD -> 1, (SBL, D0 = E0, D1 = E1, D2 = E2, D3 = 1), (SBC, D0 = E0, D1 = E1, D2 = E2, D3 = 1)
    UDU -> 0, (SBH, D0 = E0, D1 = E1, D2 = E2, D3 = 1), (SBC, D0 = E0, D1 = E1, D2 = E2, D3 = 1)
}

// Here you must specify the signal's name translation from
// STIL definitions to the output signal names.
// By default, all signals are quoted, and the output
// will take them off.
//
// If a rule is not defined for a signal name, the signal
// won't change its name.
// If it's defined but the target name is void, the signal
// will be removed from the output.
// The special rule "[] -> _" will change the "[X]" and put
// a "_X" since this format is used in the examples I've seen

signal_name_map {

    "unused_signal" -> "Unused_Signal"

    "GCFG[3]" ->
    "GCFG[4]" ->
    "GCFG[5]" ->
    "GCFG[6]" ->

    [] -> _
}

// Here you specify what tester event must be used for the scan
// chains padding. This value will be inserted at the beginning
// of the scan in signals which length is less than the max.
// The same goes for the scan out signals, but inserting at the
// end.
// They are not wfc to be translated, they are definitive
// events. (Order sensitive)

scan_padding {
    scan_in -> 0
    scan_out -> X
}

// Here you specify for what the IddqTestPoint instruction
// should be replaced in the pattern file.
// This multiline string must not have the '}' character

iddq_action {
call_iddq;
}
